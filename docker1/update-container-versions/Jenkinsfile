String envFile = "docker1/.env"

String mosquittoGitRepo = "https://github.com/eclipse/mosquitto.git"
String nginxGitRepo = "https://github.com/nginx/nginx.git"
String unifiGitRepo = "https://github.com/jacobalberty/unifi-docker.git"

String certbotUpdateSensor = "binary_sensor.certbot_updater"
String hassUpdateSensor = "binary_sensor.updater"
String mosquittoUpdateSensor = "sensor.docker_mosquitto"
String nginxUpdateSensor = "sensor.docker_nginx"
String unifiUpdateSensor = "sensor.docker_unifi"

String commitUser = "Jenkins"
String commitEmail = "jenkins@noreply.com"
String commitMessage = "Automated container version update [skip ci]"


node ("built-in") {
    Map scmVars = checkout scm

    Map versions = loadEnvVars(readFile(file: envFile))

    int updateCount = 0

    String latestMosquittoVersion
    dir ("mosquitto") {
        git (
            url: mosquittoGitRepo,
            changelog: false,
            poll: false
        )

        latestMosquittoVersion = sh (
            script: "git describe --abbrev=0",
            returnStdout: true
        ).trim() - "v"
    }

    String latestUnifiVersion
    dir ("unifi") {
        git (
            url: unifiGitRepo,
            changelog: false,
            poll: false
        )

        latestUnifiVersion = "v" + sortVersions(
            sh (
                script: "git tag --list",
                returnStdout: true
            ).tokenize("\n").findAll{it.startsWith("v") && !it.endsWith("-rc")}.collect{it - "v"}
        )[-1].trim()
    }

    String latestNginxVersion
    dir ("nginx") {
        git (
            url: nginxGitRepo,
            changelog: false,
            poll: false
        )

        latestNginxVersion = sortVersions(
            sh (
                script: "git tag --list",
                returnStdout: true
            ).tokenize("\n").collect{it - "release-"}
        )[-1].trim()
    }

    withCredentials([
        string(credentialsId: "HASS-TOKEN", variable: "token"),
        string(credentialsId: "DOCKER1-IP", variable: "docker1Ip")
    ]) {

        Map state = getHassEntityState(hassUpdateSensor, docker1Ip, token)
        if (state.state == "on") {
            String latestHassVersion = state.attributes.newest_version.trim()
            echo "HASS Update Available: ${latestHassVersion}"
            updateCount++
            versions.HASS_VERSION = latestHassVersion
        }

        state = getHassEntityState(certbotUpdateSensor, docker1Ip, token)
        if (state.state == "on") {
            String latestCertbotVersion = state.attributes.newest_version.trim()
            echo "Certbot Update Available: ${latestCertbotVersion}"
            updateCount++
            versions.CERTBOT_VERSION = latestCertbotVersion
        }

        state = getHassEntityState(mosquittoUpdateSensor, docker1Ip, token)
        if (state.attributes.image.split(":")[1] != latestMosquittoVersion) {
            echo "Mosquitto Update Available: ${latestMosquittoVersion}"
            updateCount++
            versions.MOSQUITTO_VERSION = latestMosquittoVersion
        }

        state = getHassEntityState(unifiUpdateSensor, docker1Ip, token)
        if (state.attributes.image.split(":")[1] != latestUnifiVersion) {
            echo "Unifi Update Available: ${latestUnifiVersion}"
            updateCount++
            versions.UNIFI_VERSION = latestUnifiVersion
        }

        state = getHassEntityState(nginxUpdateSensor, docker1Ip, token)
        if (state.attributes.image.split(":")[1].split("-")[0] != latestNginxVersion) {
            echo "Nginx Update Available: ${latestNginxVersion}"
            updateCount++
            versions.NGINX_VERSION = latestNginxVersion
        }
    }

    if (updateCount > 0) {
        writeFile (
            file: envFile,
            text: versions.collect{"${it.key}=${it.value}"}.join("\n")
        )
        sh "git config --global user.email ${commitEmail}"
        sh "git config --global user.name ${commitUser}"
        sh "git add ${envFile}; git commit -m'${commitMessage}'"

        sshagent(credentials: [JENKINS_SSH_KEY]) {
            sh "git push ${scmVars.GIT_URL} ${scmVars.GIT_BRANCH - "origin/"}"
        }
    }

    if (updateCount > 0 || params.forceUpdate) {
        build (
            job: "Docker1-Apply-Updates",
            wait: false
        )
    }

    currentBuild.displayName = "${updateCount} updates"

    cleanWs()
}

Map getHassEntityState(String entity, String docker1Ip, String token) {
    return readJSON (
        text: httpRequest (
            url: "http://${docker1Ip}:8123/api/states/${entity}",
            customHeaders: [[
                name: "Authorization",
                value: "Bearer " + token,
                maskValue: true
            ]]
        ).content
    )
}

@NonCPS
Map loadEnvVars(String text) {
    Map vars = [:]
    text.tokenize("\n").each {
        List split = it.tokenize("=")
        vars[split[0]] = split[1]
    }
    return vars
}